scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)
View(pressure_data)
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),aes(label=count, y = pos), size=3)+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),aes(label=count, y = pressure), size=3)+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0))+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
geom_rect(aes(fill = count), colour = "grey50")
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
geom_rect(colour = "grey50")
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#scale_fill_gradient2(low = "white", mid = "orange", high = "red") +
#sc
ggplot(pressure_data, aes(x=outcome, y=pressure, col = "black", fill = count, label = count)) +
geom_tile() +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressure, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
head(pressure_data)
pressures
#change the order in which the life history stages are plotted and listed in the legend
pressure_data$pressureOrdered = factor(ressure_data$pressure, levels=c(unique(pressures))
)
#change the order in which the life history stages are plotted and listed in the legend
pressure_data$pressureOrdered = factor(pressure_data$pressure, levels=c(unique(pressures))
)
View(pressure_data)
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#change the order in which the pressures are plotted
pressure_data$pressureOrdered = fct_rev(factor(pressure_data$pressure, levels=c(unique(pressures))))
#change the order in which the pressures are plotted
pressure_data$pressureOrdered = (factor(pressure_data$pressure, rev(levels=c(unique(pressures))))
)
#change the order in which the pressures are plotted
pressure_data$pressureOrdered = (factor(pressure_data$pressure, rev(levels=c(unique(pressures)))
)
0
#change the order in which the pressures are plotted
pressure_data$pressureOrdered = factor(pressure_data$pressure, levels=rev(c(unique(pressures))))
View(pressure_data)
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(pressure_data)
pressure_data$xlabel2<-str_split_fixed(pressure_data$outcome, "_", 1)
View(pressure_data)
pressure_data$xlabel2<-str_split_fixed(pressure_data$outcome, "_", 1)
View(pressure_data)
?str_split_fixed
pressure_data$xlabel2<-str_split_fixed(pressure_data$outcome, "_", 3)
?str_split_fixed
View(pressure_data)
library(splitstackshape)
install.packages("splitstackshape")
library(splitstackshape)
pressure_data(pressure_data, "outcome", sep="_", type.convert=FALSE)
pressure_data<-cSplit(pressure_data, "outcome", sep="_", type.convert=FALSE)
View(pressure_data)
pressure_data<-pressure_table(pressures,data1)
View(pressure_data)
pressure_data$outcomeforsplit<-pressure_data$outcome
View(pressure_data)
pressure_data<-cSplit(pressure_data, "outcomeforsplit", sep="_", type.convert=FALSE)
View(pressure_data)
names(pressure_data)
colnames(pressure_data)<-c("pressure","outcome","count","outcome1","outcome2")
View(pressure_data)
#change the order in which the pressures are plotted
pressure_data$pressureOrdered = factor(pressure_data$pressure, levels=rev(c(unique(pressures))))
ggplot(pressure_data, aes(x=interaction(outcome1, outcome2,lex.order=TRUE), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
annotate(geom = "text", x = seq_len(nrow(pressure_data)), vjust=0.5, label = pressure_data$outcome2, size = 4) +
annotate(geom = "text", x = 2.5 + 4 * (0:4), vjust=0.6, label = unique(pressure_data$outcome1), size = 6) +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=interaction(outcome1, outcome2,lex.order=TRUE), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
annotate(geom = "text", x = seq_len(nrow(pressure_data)), vjust=0.5, label = pressure_data$outcome2, size = 4) +
annotate(geom = "text", x = 2.5 + 4 * (0:4), vjust=0.6, label = unique(pressure_data$outcome1), size = 6) +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=interaction(outcome1, outcome2,lex.order=TRUE), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
#annotate(geom = "text", x = seq_len(nrow(pressure_data)), vjust=0.5, label = pressure_data$outcome2, size = 4) +
#annotate(geom = "text", x = 2.5 + 4 * (0:4), vjust=0.6, label = unique(pressure_data$outcome1), size = 6) +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")
#theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=interaction(outcome1, outcome2,lex.order=TRUE), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
#annotate(geom = "text", x = seq_len(nrow(pressure_data)), vjust=0.5, label = pressure_data$outcome2, size = 4) +
#annotate(geom = "text", x = 2.5 + 4 * (0:4), vjust=0.6, label = unique(pressure_data$outcome1), size = 6) +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=interaction(outcome1, outcome2,lex.order=TRUE), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
annotate(geom = "text", x = seq_len(nrow(pressure_data)), vjust=0.5, label = pressure_data$outcome2, size = 4) +
#annotate(geom = "text", x = 2.5 + 4 * (0:4), vjust=0.6, label = unique(pressure_data$outcome1), size = 6) +
coord_cartesian(expand = FALSE, clip = "off") +
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=interaction(outcome1,outcome2), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=interaction(outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=c(outcome1,outcome2), y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cbPalette)
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)
names(pressure_data)
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cbPalette)
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme_bw()
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cbPalette)
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cbPalette)+
theme_bw()
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cbPalette)
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)+
theme_bw
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)+
theme_bw()
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)
LHS_outcomes
library("devtools")
#Next install the ForageFishLitReview package from GitHub using the devtools package function “install_github”.
#Install the ForageFishLitReview package
#install_github("rooperc4/ForageFishLitReview")
library(ForageFishLitReview)
library(readxl)
library(ggplot2)
##DATA The example data set included in this package is made up, but follows the specified template. In the package it is called litdata.xlsm. It is the template data sheet into which the literature review has been compiled. Importantly, the excel workbook must include at least two worksheets: one containing the data and one containing the drop-down menus.
#Load the data from the example file (included in the package).
ExampleFilePath<-system.file("extdata","Literature_Data.xlsm",package="ForageFishLitReview")
ff_table<-read_excel(ExampleFilePath,sheet="Example 2")
dropdowns<-read_excel(ExampleFilePath,sheet="Do Not Edit dropdown options")
#Here we read the unique values that can be chosen in the drop down menus as pressures and we turn them into a vector of the pressures. Next we take the column names for the outcomes portion of the table (these are for example the growth_rate) that will be influenced by the pressures.
pressures<-c(unique(unlist(dropdowns[,21])))
outcomes<-colnames(ff_table)[22:42]
#Here we make the data using the ForageFishLitReview function “pressure_table” by subsetting the outcomes columns and counting how many times each of the pressures occurs in each column. Then we make the table a bit prettier to look like Figure 13.
data1<-ff_table[,which(colnames(ff_table)%in%outcomes)]
pressure_data<-pressure_table(pressures,data1)
#     ***###      ###***
#Below here not yet pushed to github, Nov. 10, 2020
library(splitstackshape)
pressure_data$outcomeforsplit<-pressure_data$outcome
pressure_data<-cSplit(pressure_data, "outcomeforsplit", sep="_", type.convert=FALSE)
colnames(pressure_data)<-c("pressure","outcome","count","outcome1","outcome2")
#change the order in which the pressures are plotted
pressure_data$pressureOrdered = factor(pressure_data$pressure, levels=rev(c(unique(pressures))))
#still need to work on how to label using outcome1 and outcome2
ggplot(pressure_data, aes(x=outcome, y=pressureOrdered, col = count, fill = count, label = count)) +
geom_tile(color="grey") +
#geom_text(col = "black") +
geom_text(data=subset(pressure_data,count != 0),col="black")+
theme_minimal() +
scale_fill_gradient2(low = "white", high = "red") +
scale_color_gradient2(low = "white", high = "red")+
scale_x_discrete(position = "top")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
###     ***
#then need to create species specific plots
#number of references by report type and publication year across all species
library(dplyr)
StudiesByYr_Type <- ff_table %>%
group_by(`Year published`,`Report type`) %>%
count()
colnames(StudiesByYr_Type)<-c("Year","ReportType","count")
#colour blind palette
cb1Palette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7","#999999")
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cbPalette)
#life history stage by life history stage and species
library(dplyr)
#get unique list of life history stages
lifestage<-c(unique(unlist(dropdowns[,12])))
#get unique list of species
LHS_outcomes<-c(unique(unlist(ff_table$`Focus species Common Name`)))
#put species into columns with life history stages as values for the rows in those columns
data2<-pivot_wider(ff_table,id_cols=NULL,names_from = "Focus species Common Name",values_from="Life stage studied (Adult, Juvenile, Larval, Egg)")
#subset the data to only the species columns
#' A function to make a table of the number of times a life history stage occurs in the column "Life stage studied (Adult, Juvenile, Larval, Egg)"
#'
#' This function to make a table of the number of times a life history stage occurs in that column.
#' @param lifestage The name of the life stage to be counted
#' @param parameter_column The column where the occurences of the the life history stage will be counted
#' @keywords forage fish, life stage, species common name, literature summary
#' @export
#' @examples
lifestage_table<-function(lifestage,parameter_columns){
require(tidyr)
t3<-data.frame(array(dim=c(length(lifestage),length(parameter_columns))))
colnames(t3)<-colnames(parameter_columns)
for(i in 1:length(lifestage)){
t3[i,]<-apply(parameter_columns,MARGIN=2,function(x){how_many_times(lifestage[i],x)})
}
t3$lifestage<-lifestage
t3<-pivot_longer(t3,colnames(parameter_columns),names_to="outcome",values_to="count")
return(t3)
}
#' A function to determine how many times a lifestage occurs in a column
#'
#' This function counts the number of instances of a lifestage (word match) in a column where each row can contain
#' multiple lifestages
#' @param lifestage The name of the lifestage to be counted
#' @param parameter_columns The column(s) where the occurences of the lifestage will be counted
#' @keywords forage fish, life stage, species common name, literature summary
#' @export
#' @examples
LHS_how_many_times<-function(lifestage,parameter_columns){
LHS_hmt<-length(grep(lifestage,parameter_columns))
return(LHS_hmt)}
data2<-data2[,c(which(colnames(data2)%in%LHS_outcomes))]
data2
#Here we make the data using the ForageFishLitReview function “lifestage_table” by subsetting the outcome column and counting how many times each of the lifestages occurs in the column.
#use the function lifestage_table
lifestage_data<-lifestage_table(lifestage,data2)
#rename columns for ease
colnames(lifestage_data)<-c("Lifestage","Fish", "Count")
lifestage
#barplot of the count of references by species and life history stage
#remove NAs for plotting
lifestage_data<-na.omit(lifestage_data)
#change the order in which the life history stages are plotted and listed in the legend
lifestage_data$LifestageOrdered = factor(lifestage_data$Lifestage, levels=c("Adult","Juvenile","Larval","Egg","not specified"))
#colour blind palette
cb2Palette <- c("#0072B2","#56B4E9","#009E73","#E69F00", "#999999")
#stacked barplot
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cbPalette)
#stacked barplot
ggplot(lifestage_data)+
geom_bar(aes(x=Fish, y=Count, fill=LifestageOrdered), stat="identity")+
scale_colour_discrete(na.translate = F) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values=cb2Palette)
ggplot(StudiesByYr_Type)+
geom_bar(aes(y=count, x=Year, fill=ReportType),stat="identity")+
scale_fill_manual(values=cb1Palette)
ff_table
# Install and load devtools package
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(ForageFishLitReview)
require(readxl)
require(ggplot2)
require(gridExtra)
require(dplyr)
require(tidyr)
options(width=50, width.cutoff=50, digits = 3)
library("devtools")
#Install the ForageFishLitReview package
install_github("rooperc4/ForageFishLitReview")
knitr::opts_chunk$set(echo = TRUE)
library(ForageFishLitReview)
require(readxl)
require(ggplot2)
require(gridExtra)
require(dplyr)
require(tidyr)
options(width=50, width.cutoff=50, digits = 3)
library(roxygen2)
library(digest)
document()
?document()
# Install and load devtools package
#install.packages("devtools")
library("devtools")
# only run if you change a function:
library(roxygen2)
library(digest)
document()
